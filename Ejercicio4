import math

class Circulo:
    def _init_(self, radio):
        self.radio = radio

    def calcular_area(self):
        return math.pi * (self.radio ** 2)

    def calcular_perimetro(self):
        return 2 * math.pi * self.radio

class Rectangulo:
    def _init_(self, base, altura):
        self.base = base
        self.altura = altura

    def calcular_area(self):
        return self.base * self.altura

    def calcular_perimetro(self):
        return 2 * (self.base + self.altura)

class Cuadrado:
    def _init_(self, lado):
        self.lado = lado

    def calcular_area(self):
        return self.lado ** 2

    def calcular_perimetro(self):
        return 4 * self.lado


class TrianguloRectangulo:
    def _init_(self, base, altura):
        self.base = base
        self.altura = altura

    def calcular_area(self):
        return (self.base * self.altura) / 2

    def calcular_hipotenusa(self):
        return math.sqrt(self.base ** 2 + self.altura ** 2)

    def calcular_perimetro(self):
        return self.base + self.altura + self.calcular_hipotenusa()

    def determinar_tipo(self):
        h = self.calcular_hipotenusa()
        if self.base == self.altura == h:
            return "Equilátero"
        elif self.base != self.altura and self.base != h and self.altura != h:
            return "Escaleno"
        else:
            return "Isósceles"


class Rombo:
    def _init_(self, diagonal_mayor, diagonal_menor, lado):
        self.diagonal_mayor = diagonal_mayor
        self.diagonal_menor = diagonal_menor
        self.lado = lado

    def calcular_area(self):
        return (self.diagonal_mayor * self.diagonal_menor) / 2

    def calcular_perimetro(self):
        return 4 * self.lado


class Trapecio:
    def _init_(self, base_mayor, base_menor, lado1, lado2, altura):
        self.base_mayor = base_mayor
        self.base_menor = base_menor
        self.lado1 = lado1
        self.lado2 = lado2
        self.altura = altura

    def calcular_area(self):
        return ((self.base_mayor + self.base_menor) * self.altura) / 2

    def calcular_perimetro(self):
        return self.base_mayor + self.base_menor + self.lado1 + self.lado2


def main():
    r = float(input("Radio del círculo: "))
    c = Circulo(r)
    print("Área del círculo:", c.calcular_area())
    print("Perímetro del círculo:", c.calcular_perimetro())

    b = float(input("\nBase del rectángulo: "))
    h = float(input("Altura del rectángulo: "))
    rec = Rectangulo(b, h)
    print("Área del rectángulo:", rec.calcular_area())
    print("Perímetro del rectángulo:", rec.calcular_perimetro())

    l = float(input("\nLado del cuadrado: "))
    cuad = Cuadrado(l)
    print("Área del cuadrado:", cuad.calcular_area())
    print("Perímetro del cuadrado:", cuad.calcular_perimetro())

    b = float(input("\nBase del triángulo rectángulo: "))
    h = float(input("Altura del triángulo rectángulo: "))
    t = TrianguloRectangulo(b, h)
    print("Área del triángulo rectángulo:", t.calcular_area())
    print("Perímetro del triángulo rectángulo:", t.calcular_perimetro())
    print("Tipo de triángulo:", t.determinar_tipo())

    dM = float(input("\nDiagonal mayor del rombo: "))
    dm = float(input("Diagonal menor del rombo: "))
    lr = float(input("Lado del rombo: "))
    rmb = Rombo(dM, dm, lr)
    print("Área del rombo:", rmb.calcular_area())
    print("Perímetro del rombo:", rmb.calcular_perimetro())

    BM = float(input("\nBase mayor del trapecio: "))
    Bm = float(input("Base menor del trapecio: "))
    l1 = float(input("Lado 1 del trapecio: "))
    l2 = float(input("Lado 2 del trapecio: "))
    ht = float(input("Altura del trapecio: "))
    tr = Trapecio(BM, Bm, l1, l2, ht)
    print("Área del trapecio:", tr.calcular_area())
    print("Perímetro del trapecio:", tr.calcular_perimetro())


if __name__ == "_main_":
    main()
